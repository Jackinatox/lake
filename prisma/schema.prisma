datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING // Only the intend was created, now money received
  PAID // Money received, now the server is being created
  PAYMENT_FAILED // Stripe weebhook said order failed   
  EXPIRED // Just to keep the entry, i dont know why yet
}

generator client {
  provider = "prisma-client-js"
}

generator worker {
  provider = "prisma-client-js"
  output   = "../worker/generated/client"
}

model GameData {
  id      Int     @id @default(autoincrement())
  name    String?
  data    Json?
  enabled Boolean @default(false)

  GameServer GameServer[]

  ServerOrder GameServerOrder[]
}

model Location {
  id           Int      @id @default(autoincrement())
  name         String?
  diskPrice    Float?
  portsLimit   Int?
  backupsLimit Int?
  enabled      Boolean? @default(true)
  ptLocationId Int      @default(1)
  cpuId        Int      @default(1)
  ramId        Int

  cpu CPU @relation(fields: [cpuId], references: [id], onDelete: Restrict)
  ram RAM @relation(fields: [ramId], references: [id], onDelete: Restrict)

  GameServer  GameServer[]
  ServerOrder GameServerOrder[]
}

model CPU {
  id           Int     @id @default(autoincrement())
  name         String?
  cores        Int?
  threads      Int?
  singleScore  Int?
  multiScore   Int?
  maxThreads   Int?
  minThreads   Int?
  pricePerCore Float   @default(0.2)

  locations Location[]
}

model RAM {
  id         Int     @id @default(autoincrement())
  name       String?
  speed      Int?
  pricePerGb Float?
  minGb      Float?  @default(0.5)
  maxGb      Float?  @default(12)

  locations Location[]
}

model GameServer {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ramMB       Int
  cpuPercent  Int
  diskMB      Int
  backupCount Int
  expires     DateTime
  price       Float // To let the user extend his server at the original price in case we increase prices

  ptServerId String?
  ptAdminId  Int?
  name       String? @default("GameServer")

  status    GameServerStatus @default(CREATED)
  errorText String?

  gameConfig Json?
  gameDataId Int
  gameData   GameData @relation(fields: [gameDataId], references: [id], onDelete: Restrict)

  locationId Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ServerOrder GameServerOrder[]
  WorkerLogs  WorkerLog[]
}

enum GameServerStatus {
  CREATED // Server created in pt
  CREATION_FAILED // Only when pt.createServer failes, not the actual installation
  ACTIVE // Server is installed

  EXPIRED // Server expired, and will be deleted from pt soon
  DELETED // Server deleted in pt
}

model GameServerOrder {
  id Int @id @default(autoincrement())

  gameServerId String? // Null if Creation event
  gameServer   GameServer? @relation(fields: [gameServerId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // TODO: what should happen on user delete 

  type       OrderType
  ramMB      Int
  cpuPercent Int
  diskMB     Int
  price      Float

  receipt_url     String?
  stripeSessionId String?     @unique
  status          OrderStatus @default(PENDING)

  expiresAt DateTime // New expiry date *if* order succeeds

  gameConfig         Json? // This is the same as the GameConfig in models
  creationGameDataId Int?
  creationGameData   GameData? @relation(fields: [creationGameDataId], references: [id], onDelete: Restrict)

  creationLocationId Int?
  creationLocation   Location? @relation(fields: [creationLocationId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeSessionId])
}

enum OrderType {
  NEW
  UPGRADE
  DOWNGRADE // For later
  RENEW
}

enum TicketStatus {
  OPEN
  CLOSED
  PENDING
  RESOLVED
}

model SupportTicket {
  id      Int          @id @default(autoincrement())
  userId  String
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title   String?
  message String
  status  TicketStatus @default(OPEN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  sessions        Session[]
  accounts        Account[]
  GameServerOrder GameServerOrder[]
  SupportTicket   SupportTicket[]
  GameServer      GameServer[]
  WorkerLogs      WorkerLog[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  ptUserId     Int?
  ptKey        String?
  stripeUserId String?

  lastLoginMethod String?

  ptUsername String?

  @@unique([email])
  @@unique([ptUsername])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

enum WorkerLogLevel {
  INFO
  WARN
  ERROR
  FATAL
}

enum WorkerJobType {
  EXPIRE_SERVERS
  SEND_EMAILS
  // Add other job types as you create them
}

model WorkerLog {
  id      Int            @id @default(autoincrement())
  jobType WorkerJobType
  jobRun  String? // Unique identifier for each job run
  level   WorkerLogLevel
  message String
  details Json? // Store error stack traces, context data, etc.

  // Optional relations for context
  gameServerId String?
  gameServer   GameServer? @relation(fields: [gameServerId], references: [id], onDelete: SetNull)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([jobType, level, createdAt])
  @@index([gameServerId])
  @@index([userId])
}

model Email {
  id        Int         @id @default(autoincrement())
  recipient String
  subject   String
  html      String
  sentAt    DateTime    @default(now())
  type      EmailType
  status    EmailStatus @default(PENDING)
  errorText String?
  retries   Int         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum EmailType {
  VERIFY_EMAIL
  PASSWORD_RESET
  SUPPORT_TICKET_RESPONSE
  EXPIRE_GAME_SERVER
  EXPIRE_GAME_SERVER7DAYS
  EXPIRE_GAME_SERVER1DAY
}
