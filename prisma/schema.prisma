datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  CREATED
  FAILED
  INSTALLED
}

enum Role {
  USER
  ADMIN
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  ptKey         String?
  ptUser        Int?
  role          Role      @default(USER)

  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  serverOrders   ServerOrder[]
  Payment        Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialId         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialId])
}

model GameData {
  id      Int     @id @default(autoincrement())
  name    String?
  data    Json?
  enabled Boolean @default(false)

  ServerOrder ServerOrder[]
}

model Location {
  id           Int      @id @default(autoincrement())
  name         String?
  diskPrice    Float?
  portsLimit   Int?
  backupsLimit Int?
  enabled      Boolean? @default(true)
  ptLocationId Int      @default(1)
  cpuId        Int      @default(1)
  ramId        Int

  cpu         CPU           @relation(fields: [cpuId], references: [id], onDelete: Restrict)
  ram         RAM           @relation(fields: [ramId], references: [id], onDelete: Restrict)
  ServerOrder ServerOrder[]
}

model CPU {
  id           Int     @id @default(autoincrement())
  name         String?
  cores        Int?
  threads      Int?
  singleScore  Int?
  multiScore   Int?
  maxThreads   Int?
  minThreads   Int?
  pricePerCore Float   @default(0.2)

  locations Location[]
  // serverIntends ServerIntend[]
}

model RAM {
  id         Int     @id @default(autoincrement())
  name       String?
  speed      Int?
  pricePerGb Float?
  minGb      Float?  @default(0.5)
  maxGb      Float?  @default(12)

  locations Location[]
  // serverIntends ServerIntend[]
}

model ServerOrder {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ramMB      Int
  cpuPercent Int
  diskMB     Int
  price      Float

  gameConfig Json?
  gameDataId Int
  gameData   GameData @relation(fields: [gameDataId], references: [id], onDelete: Restrict)

  locationId Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Restrict)

  status          OrderStatus @default(PENDING)
  errorText       Json?
  stripeSessionId String?     @unique
  serverId        String?

  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeSessionId])
}

model Payment {
  id                    String   @id @default(cuid())
  orderId               String // Foreign key to your Order model
  userId                String // Foreign key to your User model
  stripePaymentIntentId String
  stripeChargeId        String
  receiptUrl            String
  amount                Int // In cents (e.g., 990 for â‚¬9.90)
  currency              String
  status                String
  paymentMethodType     String?
  customerEmail         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
