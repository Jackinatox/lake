datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]

  ptKey           String?
  ptUser          Int?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialId         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialId])
}

model GameData {
  id      Int     @id @default(autoincrement())
  name    String?
  data    Json?
  enabled Boolean  @default(false)
}

model Location {
  id           Int     @id @default(autoincrement())
  name         String?
  diskPrice    Float?
  portsLimit   Int?
  backupsLimit Int?
  enabled      Boolean? @default(true)
  ptLocationId Int     @default(1)
  cpuId        Int     @default(1)
  ramId        Int

  cpu          CPU     @relation(fields: [cpuId], references: [id], onDelete: Restrict)
  ram          RAM     @relation(fields: [ramId], references: [id], onDelete: Restrict)
}

model CPU {
  id             Int        @id @default(autoincrement())
  name           String?
  cores          Int?
  threads        Int?
  singleScore    Int?
  multiScore     Int?
  maxThreads     Int?
  minThreads     Int?
  pricePerCore   Float      @default(0.2)
  locations      Location[]
}

model RAM {
  id            Int        @id @default(autoincrement())
  name          String?
  speed         Int?
  pricePerGb    Float?
  minGb         Float?     @default(0.5)
  maxGb         Float?     @default(12)
  locations     Location[]
}
