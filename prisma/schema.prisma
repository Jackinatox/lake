datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING // Only the intend was created, now money received
  PAID // Money received, now the server is being created
  PAYMENT_FAILED // Stripe weebhook said order failed   
  EXPIRED // Just to keep the entry, i dont know why yet
}

enum Role {
  USER
  ADMIN
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  ptKey         String?
  ptUser        Int?
  stripeUserId  String?
  role          Role      @default(USER)

  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  serverOrders   GameServerOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  GameServer GameServer[]

  SupportTicket SupportTicket[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialId         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialId])
}

model GameData {
  id      Int     @id @default(autoincrement())
  name    String?
  data    Json?
  enabled Boolean @default(false)

  GameServer GameServer[]

  ServerOrder GameServerOrder[]
}

model Location {
  id           Int      @id @default(autoincrement())
  name         String?
  diskPrice    Float?
  portsLimit   Int?
  backupsLimit Int?
  enabled      Boolean? @default(true)
  ptLocationId Int      @default(1)
  cpuId        Int      @default(1)
  ramId        Int

  cpu CPU @relation(fields: [cpuId], references: [id], onDelete: Restrict)
  ram RAM @relation(fields: [ramId], references: [id], onDelete: Restrict)

  GameServer  GameServer[]
  ServerOrder GameServerOrder[]
}

model CPU {
  id           Int     @id @default(autoincrement())
  name         String?
  cores        Int?
  threads      Int?
  singleScore  Int?
  multiScore   Int?
  maxThreads   Int?
  minThreads   Int?
  pricePerCore Float   @default(0.2)

  locations Location[]
}

model RAM {
  id         Int     @id @default(autoincrement())
  name       String?
  speed      Int?
  pricePerGb Float?
  minGb      Float?  @default(0.5)
  maxGb      Float?  @default(12)

  locations Location[]
}

model GameServer {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ramMB       Int
  cpuPercent  Int
  diskMB      Int
  backupCount Int
  expires     DateTime
  price       Float // To let the user extend his server at the original price in case we increase prices

  ptServerId String?
  ptAdminId  Int?
  name       String? @default("GameServer")

  status    GameServerStatus @default(CREATED)
  errorText String?

  gameConfig Json?
  gameDataId Int
  gameData   GameData @relation(fields: [gameDataId], references: [id], onDelete: Restrict)

  locationId Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ServerOrder GameServerOrder[]
}

enum GameServerStatus {
  CREATED // Server created in pt
  CREATION_FAILED // Only when pt.createServer failes, not the actual installation
  ACTIVE // Server is installed

  EXPIRED
  DELETED
}

model GameServerOrder {
  id Int @id @default(autoincrement())

  gameServerId String? // Null if Creation event
  gameServer   GameServer? @relation(fields: [gameServerId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)  // TODO: what should happen on user delete 

  type       OrderType
  ramMB      Int
  cpuPercent Int
  diskMB     Int
  price      Float

  receipt_url     String?
  stripeSessionId String?     @unique
  status          OrderStatus @default(PENDING)

  expiresAt DateTime // New expiry date *if* order succeeds

  gameConfig         Json? // This is the same as the GameConfig in models
  creationGameDataId Int?
  creationGameData   GameData? @relation(fields: [creationGameDataId], references: [id], onDelete: Restrict)

  creationLocationId Int?
  creationLocation   Location? @relation(fields: [creationLocationId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderType {
  NEW
  UPGRADE
  DOWNGRADE // For later
  RENEW
}

enum TicketStatus {
  OPEN
  CLOSED
  PENDING
  RESOLVED
}

model SupportTicket {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}